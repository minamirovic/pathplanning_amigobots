//One robot

#include "Aria.h"


int main(int argc, char **argv)
{
	Aria::init();
	ArArgumentParser argParser(&argc, argv);
	argParser.loadDefaultArguments();
	ArRobot robot1;
	ArRobotConnector robotConnector(&argParser, &robot1);
	ArLaserConnector laserConnector(&argParser, &robot1, &robotConnector);

	

	if (!robotConnector.connectRobot())
	{
		ArLog::log(ArLog::Terse, "Could not connect to the robot.");
		if (argParser.checkHelpAndWarnUnparsed())
		{
			// -help not given, just exit.
			Aria::logOptions();
			Aria::exit(1);
			return 1;
		}
	}


	// Trigger argument parsing
	if (!Aria::parseArgs() || !argParser.checkHelpAndWarnUnparsed())
	{
		Aria::logOptions();
		Aria::exit(1);
		return 1;
	}

	ArKeyHandler keyHandler;
	Aria::setKeyHandler(&keyHandler);
	robot1.attachKeyHandler(&keyHandler);

	ArSonarDevice sonar;
	robot1.addRangeDevice(&sonar);

	robot1.runAsync(true);


// turn on the motors, turn off amigobot sounds
	robot1.enableMotors();
	robot1.comInt(ArCommands::SOUNDTOG, 0);

	// add actions
	ArActionStallRecover recover;
	ArActionBumpers bumpers;
	ArActionAvoidFront avoidFrontNear("Avoid Front Near", 225, 0);
	ArActionAvoidFront avoidFrontFar;
	ArActionGoto gotoPoseAction("goto");
	robot1.addAction(&recover, 100);
	robot1.addAction(&bumpers, 75);
	robot1.addAction(&avoidFrontNear, 50);
	robot1.addAction(&avoidFrontFar, 49);
	robot1.addAction(&gotoPoseAction, 48);

	
	while (Aria::getRunning())
	{
		robot1.lock();

		// set a goal position 
		gotoPoseAction.setGoal(ArPose(2500, 2500);

			ArLog::log(ArLog::Normal, "Going to next goal at %.0f %.0f",
				gotoPoseAction.getGoal().getX(), gotoPoseAction.getGoal().getY());
		robot1.unlock();
		ArUtil::sleep(100);
	}


	
	robot1.waitForRunExit();

	Aria::exit(0);
	return 0;
}

//Two robots in map1obstacle 
#include "Aria.h"
#include<iostream>
#include<conio.h>

int main(int argc, char **argv)
{
	Aria::init();
	ArArgumentParser parser(&argc, argv);
	parser.loadDefaultArguments();
	const char* host1 = parser.checkParameterArgument("-rh1");
	if (!host1) host1 = "localhost";
	const char* host2 = parser.checkParameterArgument("-rh2");
	if (!host2) host2 = "localhost";
	int port1 = 8101;
	int port2 = 8101;
	if (strcmp(host1, host2) == 0)
	{
		// same host, it must be using two ports (but can still override below with -rp2)
		port2++;
	}
	bool argSet = false;
	parser.checkParameterArgumentInteger("-rp1", &port1, &argSet);
	if (!argSet) parser.checkParameterArgumentInteger("-rrtp1", &port1);
	argSet = false;
	parser.checkParameterArgumentInteger("-rp2", &port2, &argSet);
	if (!argSet) parser.checkParameterArgumentInteger("-rrtp2", &port2);

	if (!parser.checkHelpAndWarnUnparsed())
	{
		ArLog::log(ArLog::Terse, "Usage: twoRobots [-rh1 <hostname1>] [-rh2 <hostname2>] [-rp1 <port1>] [-rp2 <port2>]\n"\
			"\t<hostname1> Is the network host name of the first robot."\
			" Default is localhost (for the simulator).\n"\
			"\t<hostname2> Is the network host name of the second robot."\
			" Default is localhost (for the simulator).\n"\
			"\t<port1> Is the TCP port number of the first robot. Default is 8101.\n"\
			"\t<port2> Is the TCP port number of the second robot. Default is 8102 if"\
			" both robots have the same hostname, or 8101 if they differ.\n\n");
		return 1;
	}
	
	// the first robot connection
	ArTcpConnection con1;
	// the first robot interface
	ArRobot robot1;
	ArSonarDevice sonar1;
	ArAnalogGyro gyro1(&robot1);
	ArRobotConnector robotConnector1(&parser, &robot1);


	// the second robot connection
	ArTcpConnection con2;
	// the second robot
	ArRobot robot2;
	// the second robot devices
	ArSonarDevice sonar2;
	ArAnalogGyro gyro2(&robot2);
	ArRobotConnector robotConnector2(&parser, &robot2);
	
	//add actions for robot1
	ArActionStallRecover recover1;
	ArActionBumpers bumpers1;
	ArActionAvoidFront avoidFrontNear1("Avoid Front Near", 225, 0);
	ArActionAvoidFront avoidFrontFar1;
	ArActionGoto gotoPoseAction1("goto");
	robot1.addAction(&recover1, 100);
	robot1.addAction(&bumpers1, 75);
	robot1.addAction(&avoidFrontNear1, 50);
	robot1.addAction(&avoidFrontFar1, 49);
	robot1.addAction(&gotoPoseAction1, 48);

	//add actions for robot2
	ArActionStallRecover recover2;
	ArActionBumpers bumpers2;
	ArActionAvoidFront avoidFrontNear2("Avoid Front Near", 225, 0);
	ArActionAvoidFront avoidFrontFar2;
	ArActionGoto gotoPoseAction2("goto");
	robot2.addAction(&recover2, 100);
	robot2.addAction(&bumpers2, 75);
	robot2.addAction(&avoidFrontNear2, 50);
	robot2.addAction(&avoidFrontFar2, 49);
	robot2.addAction(&gotoPoseAction2, 48);
	

	// Get robot 1 going
	//
	int ret;
	std::string str;

	// open the connection, if this fails exit
	ArLog::log(ArLog::Normal, "Connecting to first robot at %s:%d...", host1, port1);
	if ((ret = con1.open(host1, port1)) != 0)
	{
		str = con1.getOpenMessage(ret);
		printf("Open failed to robot 1: %s\n", str.c_str());
		Aria::exit(1);
		return 1;
	}

	// add the sonar to the robot1
	robot1.addRangeDevice(&sonar1);

	// set the device connection on the robot1
	robot1.setDeviceConnection(&con1);

	// try to connect, if connection fails exit
	if (!robot1.blockingConnect())
	{
		printf("Could not connect to robot 1... exiting\n");
		Aria::exit(1);
		return 1;
	}


	// turn on the motors, turn off Amigobot sounds
	robot1.enableMotors();
	robot1.comInt(ArCommands::SOUNDTOG, 0);

	//
	// get robot 2 going

	// open the connection, if this fails exit
	ArLog::log(ArLog::Normal, "Connecting to second robot at %s:%d...", host2, port2);
	if ((ret = con2.open(host2, port2)) != 0)
	{
		str = con2.getOpenMessage(ret);
		printf("Open failed to robot 2: %s\n", str.c_str());
		Aria::exit(1);
		return 1;
	}

	// add the sonar to the robot2
	robot2.addRangeDevice(&sonar2);

	// set the device connection on the robot2
	robot2.setDeviceConnection(&con2);

	// try to connect, if this fails exit
	if (!robot2.blockingConnect())
	{
		printf("Could not connect to robot 2... exiting\n");
		Aria::exit(1);
		return 1;
	}

	// turn on the motors, turn off Amigobot sounds

	robot2.enableMotors();
	robot2.comInt(ArCommands::SOUNDTOG, 0);


	// start the robots running. true so that if connection is lost to either
	// robot, the run stops.
	robot1.runAsync(true);
	robot2.runAsync(true);

	ArTime start;
	start.setToNow();
	bool first;
	int goalNum = 0;
	// As long as both robot loops are running, lets alternate between the
	//Actions set to the first and second robot 
	// the ArRobot objects are running in background threads after runAsync()
	// calls above.
	while (robot1.isRunning() && robot2.isRunning())
	{
	ArUtil::sleep(1000);
	
	
	
	robot1.lock();
	robot2.lock();
	int r2y;
	gotoPoseAction1.setGoal(ArPose(2500, 2500));
	r2y=3500
	gotoPoseAction2.setGoal(ArPose(2500, r2y+1000));
		ArLog::log(ArLog::Normal, "Robot 1 going to goal at %.0f %.0f",
			gotoPoseAction1.getGoal().getX(), gotoPoseAction1.getGoal().getY());
		ArLog::log(ArLog::Normal, "robot 2 going to goal at %.0f %.0f",
			gotoPoseAction2.getGoal().getX(), gotoPoseAction2.getGoal().getY());
	}


	robot1.unlock();
	robot2.unlock();
		
		
	} // end of robots 1 and 2 running
	
	ArLog::log(ArLog::Normal, "Both robots disconnected.");
	Aria::exit(0);
	return 0;

} //end of main


/// Two robots in corridor map
#include "Aria.h"
#include<iostream>
#include<conio.h>

int main(int argc, char **argv)
{
	Aria::init();
	ArArgumentParser parser(&argc, argv);
	parser.loadDefaultArguments();
	const char* host1 = parser.checkParameterArgument("-rh1");
	if (!host1) host1 = "localhost";
	const char* host2 = parser.checkParameterArgument("-rh2");
	if (!host2) host2 = "localhost";
	int port1 = 8101;
	int port2 = 8101;
	if (strcmp(host1, host2) == 0)
	{
		// same host, it must be using two ports (but can still override below with -rp2)
		port2++;
	}
	bool argSet = false;
	parser.checkParameterArgumentInteger("-rp1", &port1, &argSet);
	if (!argSet) parser.checkParameterArgumentInteger("-rrtp1", &port1);
	argSet = false;
	parser.checkParameterArgumentInteger("-rp2", &port2, &argSet);
	if (!argSet) parser.checkParameterArgumentInteger("-rrtp2", &port2);

	if (!parser.checkHelpAndWarnUnparsed())
	{
		ArLog::log(ArLog::Terse, "Usage: twoRobots [-rh1 <hostname1>] [-rh2 <hostname2>] [-rp1 <port1>] [-rp2 <port2>]\n"\
			"\t<hostname1> Is the network host name of the first robot."\
			" Default is localhost (for the simulator).\n"\
			"\t<hostname2> Is the network host name of the second robot."\
			" Default is localhost (for the simulator).\n"\
			"\t<port1> Is the TCP port number of the first robot. Default is 8101.\n"\
			"\t<port2> Is the TCP port number of the second robot. Default is 8102 if"\
			" both robots have the same hostname, or 8101 if they differ.\n\n");
		return 1;
	}
	
	// the first robot connection
	ArTcpConnection con1;
	// the first robot interface
	ArRobot robot1;
	ArSonarDevice sonar1;
	ArAnalogGyro gyro1(&robot1);
	ArRobotConnector robotConnector1(&parser, &robot1);


	// the second robot connection
	ArTcpConnection con2;
	// the second robot
	ArRobot robot2;
	// the second robot devices
	ArSonarDevice sonar2;
	ArAnalogGyro gyro2(&robot2);
	ArRobotConnector robotConnector2(&parser, &robot2);
	
	//add actions for robot1
	ArActionStallRecover recover1;
	ArActionBumpers bumpers1;
	ArActionAvoidFront avoidFrontNear1("Avoid Front Near", 225, 0);
	ArActionAvoidFront avoidFrontFar1;
	ArActionGoto gotoPoseAction1("goto");
	robot1.addAction(&recover1, 100);
	robot1.addAction(&bumpers1, 75);
	robot1.addAction(&avoidFrontNear1, 50);
	robot1.addAction(&avoidFrontFar1, 49);
	robot1.addAction(&gotoPoseAction1, 48);

	//add actions for robot2
	ArActionStallRecover recover2;
	ArActionBumpers bumpers2;
	ArActionAvoidFront avoidFrontNear2("Avoid Front Near", 225, 0);
	ArActionAvoidFront avoidFrontFar2;
	ArActionGoto gotoPoseAction2("goto");
	robot2.addAction(&recover2, 100);
	robot2.addAction(&bumpers2, 75);
	robot2.addAction(&avoidFrontNear2, 50);
	robot2.addAction(&avoidFrontFar2, 49);
	robot2.addAction(&gotoPoseAction2, 48);
	

	// Get robot 1 going
	//
	int ret;
	std::string str;

	// open the connection, if this fails exit
	ArLog::log(ArLog::Normal, "Connecting to first robot at %s:%d...", host1, port1);
	if ((ret = con1.open(host1, port1)) != 0)
	{
		str = con1.getOpenMessage(ret);
		printf("Open failed to robot 1: %s\n", str.c_str());
		Aria::exit(1);
		return 1;
	}

	// add the sonar to the robot1
	robot1.addRangeDevice(&sonar1);

	// set the device connection on the robot1
	robot1.setDeviceConnection(&con1);

	// try to connect, if connection fails exit
	if (!robot1.blockingConnect())
	{
		printf("Could not connect to robot 1... exiting\n");
		Aria::exit(1);
		return 1;
	}


	// turn on the motors, turn off Amigobot sounds
	robot1.enableMotors();
	robot1.comInt(ArCommands::SOUNDTOG, 0);

	//
	// get robot 2 going

	// open the connection, if this fails exit
	ArLog::log(ArLog::Normal, "Connecting to second robot at %s:%d...", host2, port2);
	if ((ret = con2.open(host2, port2)) != 0)
	{
		str = con2.getOpenMessage(ret);
		printf("Open failed to robot 2: %s\n", str.c_str());
		Aria::exit(1);
		return 1;
	}

	// add the sonar to the robot2
	robot2.addRangeDevice(&sonar2);

	// set the device connection on the robot2
	robot2.setDeviceConnection(&con2);

	// try to connect, if this fails exit
	if (!robot2.blockingConnect())
	{
		printf("Could not connect to robot 2... exiting\n");
		Aria::exit(1);
		return 1;
	}

	// turn on the motors, turn off Amigobot sounds

	robot2.enableMotors();
	robot2.comInt(ArCommands::SOUNDTOG, 0);


	// start the robots running. true so that if connection is lost to either
	// robot, the run stops.
	robot1.runAsync(true);
	robot2.runAsync(true);

	ArTime start;
	start.setToNow();
	bool first;
	int goalNum = 0;
	// As long as both robot loops are running, lets alternate between the
	//Actions set to the first and second robot 
	// the ArRobot objects are running in background threads after runAsync()
	// calls above.
	while (robot1.isRunning() && robot2.isRunning())
	{
	ArUtil::sleep(1000);
	
	
	
	robot1.lock();
	robot2.lock();
	
	if (first || (gotoPoseAction1.haveAchievedGoal() && gotoPoseAction2.haveAchievedGoal()))
	{
		first = false;
		goalNum++;

		int r2y;

		// set positions for the different goals
		if (goalNum == 1) {
			gotoPoseAction1.setGoal(ArPose(0, 3000));
			r2y=0;
			gotoPoseAction2.setGoal(ArPose(0, r2y+ 1000));
		}
		else if (goalNum == 2)
			gotoPoseAction1.setGoal(ArPose(0, 3000));
			r2y=3000;
			gotoPoseAction2.setGoal(ArPose(3500, r2y+ 1000));
		else if (goalNum == 3) {
			gotoPoseAction1.setGoal(ArPose(4000, 3000));
			r2y=3000;
			gotoPoseAction2.setGoal(ArPose(3500, r2y+1000));
		}
else if (goalNum > 3)
			{
				break;
			}

		ArLog::log(ArLog::Normal, "Robot 1 going to goal at %.0f %.0f",
			gotoPoseAction1.getGoal().getX(), gotoPoseAction1.getGoal().getY());
		ArLog::log(ArLog::Normal, "robot 2 going to goal at %.0f %.0f",
			gotoPoseAction2.getGoal().getX(), gotoPoseAction2.getGoal().getY());
	}


	robot1.unlock();
	robot2.unlock();
		
		
	} // end of robots 1 and 2 running
	
	ArLog::log(ArLog::Normal, "Both robots disconnected.");
	Aria::exit(0);
	return 0;

} //end of main

///two robots in complex map
#include "Aria.h"
#include<iostream>
#include<conio.h>

int main(int argc, char **argv)
{
	Aria::init();
	ArArgumentParser parser(&argc, argv);
	
	parser.loadDefaultArguments();
	const char* host1 = parser.checkParameterArgument("-rh1");
	if (!host1) host1 = "localhost";
	const char* host2 = parser.checkParameterArgument("-rh2");
	if (!host2) host2 = "localhost";
	int port1 = 8101;
	int port2 = 8101;
	if (strcmp(host1, host2) == 0)
	{
		
		port2++;
	}
	bool argSet = false;
	parser.checkParameterArgumentInteger("-rp1", &port1, &argSet);
	if (!argSet) parser.checkParameterArgumentInteger("-rrtp1", &port1);
	argSet = false;
	parser.checkParameterArgumentInteger("-rp2", &port2, &argSet);
	if (!argSet) parser.checkParameterArgumentInteger("-rrtp2", &port2);

	if (!parser.checkHelpAndWarnUnparsed())
	{
		ArLog::log(ArLog::Terse, "Usage: twoRobots [-rh1 <hostname1>] [-rh2 <hostname2>] [-rp1 <port1>] [-rp2 <port2>]\n"\
			"\t<hostname1> Is the network host name of the first robot."\
			" Default is localhost (for the simulator).\n"\
			"\t<hostname2> Is the network host name of the second robot."\
			" Default is localhost (for the simulator).\n"\
			"\t<port1> Is the TCP port number of the first robot. Default is 8101.\n"\
			"\t<port2> Is the TCP port number of the second robot. Default is 8102 if"\
			" both robots have the same hostname, or 8101 if they differ.\n\n");
		return 1;
	}

	// the first robot connection
	ArTcpConnection con1;
	// the first robot interface
	ArRobot robot1;
	ArSonarDevice sonar1;
	ArAnalogGyro gyro1(&robot1);
	ArRobotConnector robotConnector1(&parser, &robot1);


	// the second robot connection
	ArTcpConnection con2;
	// the second robot
	ArRobot robot2;
	// the second robot devices
	ArSonarDevice sonar2;
	ArAnalogGyro gyro2(&robot2);
	ArRobotConnector robotConnector2(&parser, &robot2);

	//add actions for robot1
	ArActionStallRecover recover1;
	ArActionBumpers bumpers1;
	ArActionAvoidFront avoidFrontNear1("Avoid Front Near", 225, 0);
	ArActionAvoidFront avoidFrontFar1;
	
	ArActionGoto gotoPoseAction1("goto");
	
	robot1.addAction(&recover1, 100);
	robot1.addAction(&bumpers1, 75);
	robot1.addAction(&avoidFrontNear1, 50);
	robot1.addAction(&avoidFrontFar1, 49);
	
	robot1.addAction(&gotoPoseAction1, 48);
	
	

	//add actions for robot2
	ArActionStallRecover recover2;
	
	ArActionBumpers bumpers2;
	ArActionAvoidFront avoidFrontNear2("Avoid Front Near", 225, 0);
	ArActionAvoidFront avoidFrontFar2;
	ArActionGoto gotoPoseAction2("goto");
	robot2.addAction(&recover2, 100);
	robot2.addAction(&bumpers2, 75);
	robot2.addAction(&avoidFrontNear2, 50);
	robot2.addAction(&avoidFrontFar2, 49);
	
	robot2.addAction(&gotoPoseAction2, 48);
	
	// Lets get robot 1 going
	//
	int ret;
	std::string str;

	// open the connection, if this fails exit
	ArLog::log(ArLog::Normal, "Connecting to first robot at %s:%d...", host1, port1);
	if ((ret = con1.open(host1, port1)) != 0)
	{
		str = con1.getOpenMessage(ret);
		printf("Open failed to robot 1: %s\n", str.c_str());
		Aria::exit(1);
		return 1;
	}

	// add the sonar to the robot
	robot1.addRangeDevice(&sonar1);

	// set the device connection on the robot
	robot1.setDeviceConnection(&con1);

	// try to connect, if this fails exit
	if (!robot1.blockingConnect())
	{
		printf("Could not connect to robot 1... exiting\n");
		Aria::exit(1);
		return 1;
	}


	// turn on the motors, turn off robot1 sounds
	robot1.enableMotors();
	robot1.comInt(ArCommands::SOUNDTOG, 0);



	//
	// Get robot 2 going

	// open the connection, if this fails exit
	ArLog::log(ArLog::Normal, "Connecting to second robot at %s:%d...", host2, port2);
	if ((ret = con2.open(host2, port2)) != 0)
	{
		str = con2.getOpenMessage(ret);
		printf("Open failed to robot 2: %s\n", str.c_str());
		Aria::exit(1);
		return 1;
	}

	// add the sonar to the robot
	robot2.addRangeDevice(&sonar2);

	// set the device connection on the robot
	robot2.setDeviceConnection(&con2);

	// try to connect, if this fails exit
	if (!robot2.blockingConnect())
	{
		printf("Could not connect to robot 2... exiting\n");
		Aria::exit(1);
		return 1;
	}

	// turn on the motors, turn off robot2 sounds

	robot2.enableMotors();
	robot2.comInt(ArCommands::SOUNDTOG, 0);


	// start the robots running. true so that if connection is lost to either
	// robot, the run stops.
	robot1.runAsync(true);
	robot2.runAsync(true);
	bool first;
	ArTime start;
	start.setToNow();
	
	int goalNum = 0;
	
	while (robot1.isRunning() && robot2.isRunning())
	{
		ArUtil::sleep(1000);
		robot1.lock();
		robot2.lock();

		

		if (first || (gotoPoseAction1.haveAchievedGoal() && gotoPoseAction2.haveAchievedGoal()))
		{
			first = false;
			goalNum++;
			int r2y;

		// set positions for the different goals
			if (goalNum == 1) {
				gotoPoseAction1.setGoal(ArPose(7300, 3000));
				r2y = 0;
				gotoPoseAction2.setGoal(ArPose(0, 0));
				
			}
			else if (goalNum == 2)
			{
				gotoPoseAction1.setGoal(ArPose(7300, 3000));
				r2y = 7000;
				gotoPoseAction2.setGoal(ArPose(11000, r2y+1000));
			}
			else if (goalNum == 3)
			{
				gotoPoseAction1.setGoal(ArPose(18000, -2600));
				r2y = 7000;
				gotoPoseAction2.setGoal(ArPose(11000, r2y + 1000));
			}
			
			else if (goalNum > 3)
			{
				break;
			}
			

			ArLog::log(ArLog::Normal, "Robot 1 going to goal at %.0f %.0f",
				gotoPoseAction1.getGoal().getX(), gotoPoseAction1.getGoal().getY());
			ArLog::log(ArLog::Normal, "robot 2 going to goal at %.0f %.0f",
				gotoPoseAction2.getGoal().getX(), gotoPoseAction2.getGoal().getY());

		robot1.unlock();
		robot2.unlock();

	}

 // end of while robots 1 and 2 running

		ArLog::log(ArLog::Normal, "Both robots disconnected.");
		Aria::exit(0);
		return 0;

	
}//end of main

//three robots with complex map
#include "Aria.h"
#include<iostream>
#include<conio.h>


int main(int argc, char **argv)
{
	Aria::init();
	ArArgumentParser parser(&argc, argv);
	parser.loadDefaultArguments();
	const char* host1 = parser.checkParameterArgument("-rh1");
	if (!host1) host1 = "localhost";
	const char* host2 = parser.checkParameterArgument("-rh2");
	if (!host2) host2 = "localhost";
	const char* host3 = parser.checkParameterArgument("-rh3");
	if (!host3) host3 = "localhost";
	int port1 = 8101;
	int port2 = 8101;
	int port3 = 8103;
	if (strcmp(host1, host2) == 0)
	{
		
		port2++;
	}
	bool argSet = false;
	parser.checkParameterArgumentInteger("-rp1", &port1, &argSet);
	if (!argSet) parser.checkParameterArgumentInteger("-rrtp1", &port1);
	argSet = false;
	parser.checkParameterArgumentInteger("-rp2", &port2, &argSet);
	if (!argSet) parser.checkParameterArgumentInteger("-rrtp2", &port2);
	argSet = false;
	parser.checkParameterArgumentInteger("-rp3", &port3, &argSet);
	if (!argSet) parser.checkParameterArgumentInteger("-rrtp3", &port3);
	//argSet = false;

	if (!parser.checkHelpAndWarnUnparsed())
	{
		ArLog::log(ArLog::Terse, "Usage: three robots [-rh1 <hostname1>] [-rh2 <hostname2>] [-rp1 <port1>] [-rp2 <port2>]\n"\
			"\t<hostname1> Is the network host name of the first robot."\
			" Default is localhost (for the simulator).\n"\
			"\t<hostname2> Is the network host name of the second robot."\
			" Default is localhost (for the simulator).\n"\
			"\t<port1> Is the TCP port number of the first robot. Default is 8101.\n"\
			"\t<port2> Is the TCP port number of the second robot. Default is 8102 if"\
			" both robots have the same hostname, or 8101 if they differ.\n\n");
		return 1;
	}

	// the first robot connection
	ArTcpConnection con1;
	// the first robot interface
	ArRobot robot1;
	ArSonarDevice sonar1;
	ArAnalogGyro gyro1(&robot1);
	ArRobotConnector robotConnector1(&parser, &robot1);


	// the second robot connection
	ArTcpConnection con2;
	// the second robot
	ArRobot robot2;
	// the second robot devices
	ArSonarDevice sonar2;
	ArAnalogGyro gyro2(&robot2);
	ArRobotConnector robotConnector2(&parser, &robot2);

	// the third robot connection
	ArTcpConnection con3;
	// the third robot
	ArRobot robot3;

	// the third robot devices
	ArSonarDevice sonar3;
	ArAnalogGyro gyro3(&robot3);
	ArRobotConnector robotConnector3(&parser, &robot3);

	//add actions for robot1
	ArActionStallRecover recover1;
	ArActionBumpers bumpers1;
	ArActionAvoidFront avoidFrontNear1("Avoid Front Near", 225, 0);
	ArActionAvoidFront avoidFrontFar1;

	ArActionGoto gotoPoseAction1("goto");

	robot1.addAction(&recover1, 100);
	robot1.addAction(&bumpers1, 75);
	robot1.addAction(&avoidFrontNear1, 50);
	robot1.addAction(&avoidFrontFar1, 49);

	robot1.addAction(&gotoPoseAction1, 48);

	//add actions for robot2
	ArActionStallRecover recover2;
	ArActionBumpers bumpers2;
	ArActionAvoidFront avoidFrontNear2("Avoid Front Near", 225, 0);
	ArActionAvoidFront avoidFrontFar2;

	ArActionGoto gotoPoseAction2("goto");

	robot2.addAction(&recover2, 100);
	robot2.addAction(&bumpers2, 75);
	robot2.addAction(&avoidFrontNear2, 50);
	robot2.addAction(&avoidFrontFar2, 49);
	robot2.addAction(&gotoPoseAction2, 48);
	
	//add actions for robot3
	ArActionStallRecover recover3;
	ArActionBumpers bumpers3;
	ArActionAvoidFront avoidFrontNear3("Avoid Front Near", 225, 0);
	ArActionAvoidFront avoidFrontFar3;

	ArActionGoto gotoPoseAction3("goto");

	robot3.addAction(&recover3, 100);
	robot3.addAction(&bumpers3, 75);
	robot3.addAction(&avoidFrontNear3, 50);
	robot3.addAction(&avoidFrontFar3, 49);

	robot3.addAction(&gotoPoseAction3, 48);


	int ret;
	std::string str;

	// open the connection, if this fails exit
	ArLog::log(ArLog::Normal, "Connecting to first robot at %s:%d...", host1, port1);
	if ((ret = con1.open(host1, port1)) != 0)
	{
		str = con1.getOpenMessage(ret);
		printf("Open failed to robot 1: %s\n", str.c_str());
		Aria::exit(1);
		return 1;
	}

	// add the sonar to the robot
	robot1.addRangeDevice(&sonar1);

	// set the device connection on the robot
	robot1.setDeviceConnection(&con1);

	// try to connect, if this fails exit
	if (!robot1.blockingConnect())
	{
		printf("Could not connect to robot 1... exiting\n");
		Aria::exit(1);
		return 1;
	}


	// turn on the robot1 motors, turn off robot1 sounds
	robot1.enableMotors();
	robot1.comInt(ArCommands::SOUNDTOG, 0);

	// Get robot2 going

	// open the connection, if connection fails exit
	ArLog::log(ArLog::Normal, "Connecting to second robot at %s:%d...", host2, port2);
	if ((ret = con2.open(host2, port2)) != 0)
	{
		str = con2.getOpenMessage(ret);
		printf("Open failed to robot 2: %s\n", str.c_str());
		Aria::exit(1);
		return 1;
	}

	// add the sonar to the robot2
	robot2.addRangeDevice(&sonar2);

	// set the device connection on the robot2
	robot2.setDeviceConnection(&con2);

	// try to connect, if the connection fails exit
	if (!robot2.blockingConnect())
	{
		printf("Could not connect to robot 2... exiting\n");
		Aria::exit(1);
		return 1;
	}

	// turn on the motors, turn off Amigobot sounds

	robot2.enableMotors();
	robot2.comInt(ArCommands::SOUNDTOG, 0);


	// open the connection, if this fails exit
	ArLog::log(ArLog::Normal, "Connecting to third robot at %s:%d...", host3, port3);
	if ((ret = con3.open(host3, port3)) != 0)
	{
		str = con3.getOpenMessage(ret);
		printf("Open failed to robot 3: %s\n", str.c_str());
		Aria::exit(1);
		return 1;
	}

	// add the sonar to the robot3
	robot3.addRangeDevice(&sonar3);

	// set the device connection on the robot3
	robot3.setDeviceConnection(&con3);

	// try to connect, if connection fails exit
	if (!robot3.blockingConnect())
	{
		printf("Could not connect to robot 3... exiting\n");
		Aria::exit(1);
		return 1;
	}

	// turn on the robot3 motors, turn off robot3 sounds
	
	robot3.enableMotors();
	robot3.comInt(ArCommands::SOUNDTOG, 0);
	// start the robots running. true so that if connection is lost to either
	// robot, the run stops.
	robot1.runAsync(true);
	robot2.runAsync(true);
	robot3.runAsync(true);

	bool first=true;


	while (robot1.isRunning() && robot2.isRunning() && robot3.isRunning())
	{
		int goalNum = 0;
		
		while (robot1.isRunning() && robot2.isRunning() && robot3.isRunning())
		{
			ArUtil::sleep(1000);
			robot1.lock();
			robot2.lock();
			robot3.lock();
			


			if (first || (gotoPoseAction1.haveAchievedGoal() && gotoPoseAction2.haveAchievedGoal() && gotoPoseAction3.haveAchievedGoal()))
			{
				first = false;
				goalNum++;

				int r2y;
				int r3y;
			// set positions for the different goals
				if (goalNum == 1) {
					gotoPoseAction1.setGoal(ArPose(7300, 3000));
					int r2y = 7000;
					gotoPoseAction2.setGoal(ArPose(11000, r2y + 1000);
					r3y = -3000;
					gotoPoseAction3.setGoal(ArPose(18000, r3y + 2000);
				}
				else if (goalNum == 2)
				{
					gotoPoseAction1.setGoal(ArPose(7300, 3000));
					int r2y = 7000;
					gotoPoseAction2.setGoal(ArPose(11000, r2y + 1000);
					r3y = -3000;
					gotoPoseAction3.setGoal(ArPose(18000, r3y + 2000);
				}
				else if (goalNum == 3)
				{
					gotoPoseAction1.setGoal(ArPose(21000, -3500));
					int r2y = 7000;
					gotoPoseAction2.setGoal(ArPose(11000, r2y + 1000));
					r3y = -3000;
					gotoPoseAction3.setGoal(ArPose(18000, r3y + 2000));
				}
				else if (goalNum == 4)
				{
					gotoPoseAction1.setGoal(ArPose(21000, -3500));
					int r2y = 7000;
					gotoPoseAction2.setGoal(ArPose(11000, r2y + 1000));
					r3y = 4500;
					gotoPoseAction3.setGoal(ArPose(18500, r3y + 2000));
				}

				else if (goalNum > 4)
				{
					break;
				}



				ArLog::log(ArLog::Normal, "Robot 1 going to goal at %.0f %.0f",
					gotoPoseAction1.getGoal().getX(), gotoPoseAction1.getGoal().getY());
				ArLog::log(ArLog::Normal, "robot 2 going to goal at %.0f %.0f",
					gotoPoseAction2.getGoal().getX(), gotoPoseAction2.getGoal().getY());
ArLog::log(ArLog::Normal, "robot 3 going to goal at %.0f %.0f",
					gotoPoseAction3.getGoal().getX(), gotoPoseAction3.getGoal().getY());

			}

			robot1.unlock();
			robot2.unlock();
			robot3.unlock();


		}

		ArLog::log(ArLog::Normal, "All robots disconnected.");
		Aria::exit(0);
		return 0;

	} 
}//end of main


